"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = require("styled-components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _default = function _default() {
  return {
    // Use beforeRenderToHtml to extract the styles into the page meta
    beforeRenderToHtml: function beforeRenderToHtml(element, _ref) {
      var meta = _ref.meta;
      meta.styledComponentsSheet = new _styledComponents.ServerStyleSheet();
      return /*#__PURE__*/_react["default"].createElement(_styledComponents.StyleSheetManager, {
        sheet: meta.styledComponentsSheet.instance
      }, element);
    },
    headElements: function headElements(elements, _ref2) {
      var meta = _ref2.meta;
      // The styles aren't fully extracted until the react component
      // has been rendered to an html string. So we wait until the head
      // to call the sheet's getStyleElement function
      // and then insert the tag into the Head
      elements = [].concat(_toConsumableArray(elements), [meta.styledComponentsSheet.getStyleElement()]);
      return elements;
    }
  };
};

exports["default"] = _default;